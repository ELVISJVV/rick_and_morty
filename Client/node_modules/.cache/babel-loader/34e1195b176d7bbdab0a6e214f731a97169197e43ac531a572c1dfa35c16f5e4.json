{"ast":null,"code":"const regExEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\nconst regexPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{6,10}/;\n\n/* const validate = (userData, errors, setErrors) => {\r\n    // let errorsObj = {};\r\n\r\n    if (!userData.email) {\r\n        setErrors({ ...errors, email: 'Email is required' });\r\n        // errorsObj.email = 'Email is required';\r\n\r\n    } else if (userData.email.length > 35) {\r\n        setErrors({ ...errors, email: 'Email needs to be less than 35 characters' });\r\n        // errorsObj.email = 'Email needs to be less than 35 characters';\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\r\n        setErrors({ ...errors, email: 'Email is invalid' });\r\n        // errorsObj.email = 'Email is invalid';\r\n    } else {\r\n        setErrors({ ...errors, email: '' });\r\n    }\r\n\r\n    if (userData.password.length < 6 || userData.password.length > 10) {\r\n        setErrors({ ...errors, password: 'Password needs to be between 6 and 10 characters' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    else if (!/(?=.*[0-9])/.test(userData.password)) {\r\n        setErrors({ ...errors, password: 'Password needs to be a number' });\r\n    } else {\r\n        setErrors({ ...errors, password: '' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be a number';\r\n    // }\r\n\r\n    // setErrors(errorsObj);\r\n} */\n\n// const validate = (inputs) => {\n//     const errors = {};\n//     if (!inputs.email) errors.email = \"Email is null\";\n\n//     if (inputs.password.length < 6 && inputs.password.length > 10) errors.password = \"Email contain 6 characters\";\n\n//     if (!regExEmail.test(inputs.email)) errors.email = \"Email Will be Email\";\n\n//     if (!regexPassword.test(inputs.password)) errors.password = \"Password ... \";\n\n//     if (inputs.password.length < 6)\n//         errors.password = \"Password must contain 6 characters\";\n//     if (!inputs.password) errors.password = \"Password is null\";\n\n//     return errors;\n// };\n\n// const validate = (userData) => {\n//     const errorsObj = {};\n//     if (!userData.email) errorsObj.email = 'Email is required';\n//     // console.log(userData);\n//     // console.log(userData.email);\n//     // console.log(object);\n\n//     if (userData.email.length > 35) errorsObj.email = 'Email needs to be less than 35 characters';\n\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) errorsObj.email = 'Email is invalid';\n\n//     if (!userData.password) errorsObj.password = \"Password is required\";\n\n//     if (!/\\d/.test(userData.password) && userData.password.length !== 0) errorsObj.password = 'Password needs to be a number';\n\n//     if ((userData.password.length < 6 && userData.password.length !== 0 ) || userData.password.length > 10) errorsObj.password = 'Password needs to be between 6 and 10 characters';\n\n//     return errorsObj;\n// }\n\nexport default validate;","map":{"version":3,"names":["regExEmail","regexPassword","validate"],"sources":["C:/Users/Elvis/Documents/Proyectos/Soy Henry/M2/rick_and_morty/src/components/Form/validation.js"],"sourcesContent":["\r\nconst regExEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\nconst regexPassword =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{6,10}/;\r\n\r\n/* const validate = (userData, errors, setErrors) => {\r\n    // let errorsObj = {};\r\n\r\n    if (!userData.email) {\r\n        setErrors({ ...errors, email: 'Email is required' });\r\n        // errorsObj.email = 'Email is required';\r\n\r\n    } else if (userData.email.length > 35) {\r\n        setErrors({ ...errors, email: 'Email needs to be less than 35 characters' });\r\n        // errorsObj.email = 'Email needs to be less than 35 characters';\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\r\n        setErrors({ ...errors, email: 'Email is invalid' });\r\n        // errorsObj.email = 'Email is invalid';\r\n    } else {\r\n        setErrors({ ...errors, email: '' });\r\n    }\r\n\r\n    if (userData.password.length < 6 || userData.password.length > 10) {\r\n        setErrors({ ...errors, password: 'Password needs to be between 6 and 10 characters' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    else if (!/(?=.*[0-9])/.test(userData.password)) {\r\n        setErrors({ ...errors, password: 'Password needs to be a number' });\r\n    } else {\r\n        setErrors({ ...errors, password: '' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be a number';\r\n    // }\r\n\r\n    // setErrors(errorsObj);\r\n} */\r\n\r\n// const validate = (inputs) => {\r\n//     const errors = {};\r\n//     if (!inputs.email) errors.email = \"Email is null\";\r\n\r\n//     if (inputs.password.length < 6 && inputs.password.length > 10) errors.password = \"Email contain 6 characters\";\r\n\r\n//     if (!regExEmail.test(inputs.email)) errors.email = \"Email Will be Email\";\r\n\r\n//     if (!regexPassword.test(inputs.password)) errors.password = \"Password ... \";\r\n\r\n//     if (inputs.password.length < 6)\r\n//         errors.password = \"Password must contain 6 characters\";\r\n//     if (!inputs.password) errors.password = \"Password is null\";\r\n\r\n//     return errors;\r\n// };\r\n\r\n// const validate = (userData) => {\r\n//     const errorsObj = {};\r\n//     if (!userData.email) errorsObj.email = 'Email is required';\r\n//     // console.log(userData);\r\n//     // console.log(userData.email);\r\n//     // console.log(object);\r\n\r\n//     if (userData.email.length > 35) errorsObj.email = 'Email needs to be less than 35 characters';\r\n    \r\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) errorsObj.email = 'Email is invalid';\r\n    \r\n\r\n//     if (!userData.password) errorsObj.password = \"Password is required\";\r\n\r\n//     if (!/\\d/.test(userData.password) && userData.password.length !== 0) errorsObj.password = 'Password needs to be a number';\r\n\r\n//     if ((userData.password.length < 6 && userData.password.length !== 0 ) || userData.password.length > 10) errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    \r\n\r\n\r\n\r\n//     return errorsObj;\r\n// }\r\n\r\n\r\n\r\nexport default validate;"],"mappings":"AACA,MAAMA,UAAU,GAAG,2CAA2C;AAC9D,MAAMC,aAAa,GACf,yEAAyE;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;;AAKA;AACA;;AAIA,eAAeC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}