{"ast":null,"code":"const regExEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\nconst regexPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{6,10}/;\n\n/* const validate = (userData, errors, setErrors) => {\r\n    // let errorsObj = {};\r\n\r\n    if (!userData.email) {\r\n        setErrors({ ...errors, email: 'Email is required' });\r\n        // errorsObj.email = 'Email is required';\r\n\r\n    } else if (userData.email.length > 35) {\r\n        setErrors({ ...errors, email: 'Email needs to be less than 35 characters' });\r\n        // errorsObj.email = 'Email needs to be less than 35 characters';\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\r\n        setErrors({ ...errors, email: 'Email is invalid' });\r\n        // errorsObj.email = 'Email is invalid';\r\n    } else {\r\n        setErrors({ ...errors, email: '' });\r\n    }\r\n\r\n    if (userData.password.length < 6 || userData.password.length > 10) {\r\n        setErrors({ ...errors, password: 'Password needs to be between 6 and 10 characters' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    else if (!/(?=.*[0-9])/.test(userData.password)) {\r\n        setErrors({ ...errors, password: 'Password needs to be a number' });\r\n    } else {\r\n        setErrors({ ...errors, password: '' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be a number';\r\n    // }\r\n\r\n    // setErrors(errorsObj);\r\n} */\n\n// const validate = (inputs) => {\n//     const errors = {};\n//     if (!inputs.email) errors.email = \"Email is null\";\n\n//     if (inputs.password.length < 6 && inputs.password.length > 10) errors.password = \"Email contain 6 characters\";\n\n//     if (!regExEmail.test(inputs.email)) errors.email = \"Email Will be Email\";\n\n//     if (!regexPassword.test(inputs.password)) errors.password = \"Password ... \";\n\n//     if (inputs.password.length < 6)\n//         errors.password = \"Password must contain 6 characters\";\n//     if (!inputs.password) errors.password = \"Password is null\";\n//     return errors;\n// };\n\nconst validate = userData => {\n  let errorsObj = {};\n  if (!userData.email) {\n    setErrors({\n      ...errors,\n      email: 'Email is required'\n    });\n    errorsObj.email = 'Email is required';\n  } else if (userData.email.length > 35) {\n    setErrors({\n      ...errors,\n      email: 'Email needs to be less than 35 characters'\n    });\n    // errorsObj.email = 'Email needs to be less than 35 characters';\n  } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\n    setErrors({\n      ...errors,\n      email: 'Email is invalid'\n    });\n    // errorsObj.email = 'Email is invalid';\n  } else {\n    setErrors({\n      ...errors,\n      email: ''\n    });\n  }\n  if (userData.password.length < 6 || userData.password.length > 10) {\n    setErrors({\n      ...errors,\n      password: 'Password needs to be between 6 and 10 characters'\n    });\n  }\n  //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\n  else if (!/(?=.*[0-9])/.test(userData.password)) {\n    setErrors({\n      ...errors,\n      password: 'Password needs to be a number'\n    });\n  } else {\n    setErrors({\n      ...errors,\n      password: ''\n    });\n  }\n  //     errorsObj.password = 'Password needs to be a number';\n  // }\n\n  // setErrors(errorsObj);\n  return errorsObj;\n};\nexport default validate;","map":{"version":3,"names":["regExEmail","regexPassword","validate","userData","errorsObj","email","setErrors","errors","length","test","password"],"sources":["C:/Users/Elvis/Documents/Proyectos/Soy Henry/M2/rick_and_morty/src/components/Form/validation.js"],"sourcesContent":["\r\nconst regExEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\nconst regexPassword =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{6,10}/;\r\n\r\n/* const validate = (userData, errors, setErrors) => {\r\n    // let errorsObj = {};\r\n\r\n    if (!userData.email) {\r\n        setErrors({ ...errors, email: 'Email is required' });\r\n        // errorsObj.email = 'Email is required';\r\n\r\n    } else if (userData.email.length > 35) {\r\n        setErrors({ ...errors, email: 'Email needs to be less than 35 characters' });\r\n        // errorsObj.email = 'Email needs to be less than 35 characters';\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\r\n        setErrors({ ...errors, email: 'Email is invalid' });\r\n        // errorsObj.email = 'Email is invalid';\r\n    } else {\r\n        setErrors({ ...errors, email: '' });\r\n    }\r\n\r\n    if (userData.password.length < 6 || userData.password.length > 10) {\r\n        setErrors({ ...errors, password: 'Password needs to be between 6 and 10 characters' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    else if (!/(?=.*[0-9])/.test(userData.password)) {\r\n        setErrors({ ...errors, password: 'Password needs to be a number' });\r\n    } else {\r\n        setErrors({ ...errors, password: '' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be a number';\r\n    // }\r\n\r\n    // setErrors(errorsObj);\r\n} */\r\n\r\n// const validate = (inputs) => {\r\n//     const errors = {};\r\n//     if (!inputs.email) errors.email = \"Email is null\";\r\n\r\n//     if (inputs.password.length < 6 && inputs.password.length > 10) errors.password = \"Email contain 6 characters\";\r\n\r\n//     if (!regExEmail.test(inputs.email)) errors.email = \"Email Will be Email\";\r\n\r\n//     if (!regexPassword.test(inputs.password)) errors.password = \"Password ... \";\r\n\r\n//     if (inputs.password.length < 6)\r\n//         errors.password = \"Password must contain 6 characters\";\r\n//     if (!inputs.password) errors.password = \"Password is null\";\r\n//     return errors;\r\n// };\r\n\r\nconst validate = (userData) => {\r\n    let errorsObj = {};\r\n\r\n    if (!userData.email) {\r\n        setErrors({ ...errors, email: 'Email is required' });\r\n        errorsObj.email = 'Email is required';\r\n\r\n    } else if (userData.email.length > 35) {\r\n        setErrors({ ...errors, email: 'Email needs to be less than 35 characters' });\r\n        // errorsObj.email = 'Email needs to be less than 35 characters';\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(userData.email)) {\r\n        setErrors({ ...errors, email: 'Email is invalid' });\r\n        // errorsObj.email = 'Email is invalid';\r\n    } else {\r\n        setErrors({ ...errors, email: '' });\r\n    }\r\n\r\n    if (userData.password.length < 6 || userData.password.length > 10) {\r\n        setErrors({ ...errors, password: 'Password needs to be between 6 and 10 characters' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be between 6 and 10 characters';\r\n    else if (!/(?=.*[0-9])/.test(userData.password)) {\r\n        setErrors({ ...errors, password: 'Password needs to be a number' });\r\n    } else {\r\n        setErrors({ ...errors, password: '' });\r\n    }\r\n    //     errorsObj.password = 'Password needs to be a number';\r\n    // }\r\n\r\n    // setErrors(errorsObj);\r\n    return errorsObj;\r\n} \r\n\r\n\r\n\r\nexport default validate;"],"mappings":"AACA,MAAMA,UAAU,GAAG,2CAA2C;AAC9D,MAAMC,aAAa,GACf,yEAAyE;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;EAC3B,IAAIC,SAAS,GAAG,CAAC,CAAC;EAElB,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;IACjBC,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEF,KAAK,EAAE;IAAoB,CAAC,CAAC;IACpDD,SAAS,CAACC,KAAK,GAAG,mBAAmB;EAEzC,CAAC,MAAM,IAAIF,QAAQ,CAACE,KAAK,CAACG,MAAM,GAAG,EAAE,EAAE;IACnCF,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEF,KAAK,EAAE;IAA4C,CAAC,CAAC;IAC5E;EACJ,CAAC,MAAM,IAAI,CAAC,6CAA6C,CAACI,IAAI,CAACN,QAAQ,CAACE,KAAK,CAAC,EAAE;IAC5EC,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEF,KAAK,EAAE;IAAmB,CAAC,CAAC;IACnD;EACJ,CAAC,MAAM;IACHC,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEF,KAAK,EAAE;IAAG,CAAC,CAAC;EACvC;EAEA,IAAIF,QAAQ,CAACO,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACO,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAE;IAC/DF,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEG,QAAQ,EAAE;IAAmD,CAAC,CAAC;EAC1F;EACA;EAAA,KACK,IAAI,CAAC,aAAa,CAACD,IAAI,CAACN,QAAQ,CAACO,QAAQ,CAAC,EAAE;IAC7CJ,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEG,QAAQ,EAAE;IAAgC,CAAC,CAAC;EACvE,CAAC,MAAM;IACHJ,SAAS,CAAC;MAAE,GAAGC,MAAM;MAAEG,QAAQ,EAAE;IAAG,CAAC,CAAC;EAC1C;EACA;EACA;;EAEA;EACA,OAAON,SAAS;AACpB,CAAC;AAID,eAAeF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}